{"ast":null,"code":"var _jsxFileName = \"/home/alyshanmaredia/Desktop/dashboard/src/components/Dashboard.js\";\nimport React, { Component } from \"react\";\nimport \"./Dashboard.css\";\nimport ReactFC from \"react-fusioncharts\";\nimport FusionCharts from \"fusioncharts\";\nimport Column2D from \"fusioncharts/fusioncharts.charts\";\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport WidgetBar from \"./WidgetBar\";\nimport WidgetDoughnut from \"./WidgetDoughnut\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme); //excel import\n\nconst config = {\n  apiKey: \"AIzaSyDMu-Vw30ykPPmFT3cXeunzKEi4EahzglI\",\n  spreadsheetId: \"1vcDPrMexD8bxNwwzK9IxF8wch6Hfezq2eooJACDiqgg\"\n};\nconst url = `https://sheets.googleapis.com/v4/spreadsheets/${config.spreadsheetId}/values:batchGet?ranges=Sheet1&majorDimension=ROWS&key=${config.apiKey}`;\n\nclass Dashboard extends Component {\n  constructor() {\n    super();\n\n    this.getData = arg => {\n      const arr = this.state.items;\n      const arrLen = arr.length;\n      let organicSource = 0;\n      let directSource = 0;\n      let selectedValue = null;\n\n      for (let i = 0; i < arrLen; i++) {\n        if (arg == arr[i][\"month\"]) {\n          organicSource = arr[i].organic_source;\n          directSource = arr[i].direct_source;\n        }\n      }\n    };\n\n    this.state = {\n      items: [],\n      dropdownOption: [],\n      selectedValue: null,\n      organicSource: null,\n      directSource: null,\n      referralSource: null\n    };\n  }\n\n  updateDashboard() {}\n\n  componentDidMount() {\n    fetch(url).then(response => response.json()).then(data => {\n      let batchRowValues = data.valueRanges[0].values;\n      const rows = [];\n\n      for (let i = 1; i < batchRowValues.length; i++) {\n        let rowObject = {};\n\n        for (let j = 0; j < batchRowValues[i].length; j++) {\n          rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n        }\n\n        rows.push(rowObject);\n      } //dropdown options\n\n\n      let dropdownOptions = [];\n\n      for (let i = 0; i < rows.length; i++) {\n        dropdownOptions.push(rows[i].month);\n      }\n\n      dropdownOptions = Array.from(new Set(dropdownOptions)).reverse();\n      this.setState({\n        items: rows,\n        dropdownOptions: dropdownOptions,\n        selectedValue: \"Jan 2018\"\n      }, () => this.getData(\"Jan 2018\"));\n    });\n  }\n\n  render() {\n    const chartData = [{\n      label: \"Venezuela\",\n      value: \"290\"\n    }, {\n      label: \"Saudi\",\n      value: \"260\"\n    }];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(WidgetBar, {\n      title: \"Title\",\n      data: chartData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(WidgetDoughnut, {\n      title: \"Doughnut\",\n      data: chartData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Dropdown, {\n      options: this.state.dropdownOptions,\n      onChange: this.updateDashboard,\n      value: this.state.selectedValue,\n      placeholder: \"Select an option\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/alyshanmaredia/Desktop/dashboard/src/components/Dashboard.js"],"names":["React","Component","ReactFC","FusionCharts","Column2D","FusionTheme","WidgetBar","WidgetDoughnut","Dropdown","fcRoot","config","apiKey","spreadsheetId","url","Dashboard","constructor","getData","arg","arr","state","items","arrLen","length","organicSource","directSource","selectedValue","i","organic_source","direct_source","dropdownOption","referralSource","updateDashboard","componentDidMount","fetch","then","response","json","data","batchRowValues","valueRanges","values","rows","rowObject","j","push","dropdownOptions","month","Array","from","Set","reverse","setState","render","chartData","label","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Dashboard.css\";\n\nimport ReactFC from \"react-fusioncharts\";\nimport FusionCharts from \"fusioncharts\";\nimport Column2D from \"fusioncharts/fusioncharts.charts\";\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport WidgetBar from \"./WidgetBar\";\nimport WidgetDoughnut from \"./WidgetDoughnut\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\n\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\n//excel import\nconst config = {\n  apiKey: \"AIzaSyDMu-Vw30ykPPmFT3cXeunzKEi4EahzglI\",\n  spreadsheetId: \"1vcDPrMexD8bxNwwzK9IxF8wch6Hfezq2eooJACDiqgg\",\n};\nconst url = `https://sheets.googleapis.com/v4/spreadsheets/${config.spreadsheetId}/values:batchGet?ranges=Sheet1&majorDimension=ROWS&key=${config.apiKey}`;\n\nclass Dashboard extends Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n      dropdownOption: [],\n      selectedValue: null,\n      organicSource: null,\n      directSource: null,\n      referralSource: null,\n    };\n  }\n  getData = (arg) => {\n    const arr = this.state.items;\n    const arrLen = arr.length;\n    let organicSource = 0;\n    let directSource = 0;\n    let selectedValue = null;\n\n    for (let i = 0; i < arrLen; i++) {\n      if (arg == arr[i][\"month\"]) {\n        organicSource = arr[i].organic_source;\n        directSource = arr[i].direct_source;\n      }\n    }\n  };\n  updateDashboard() {}\n  componentDidMount() {\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        let batchRowValues = data.valueRanges[0].values;\n\n        const rows = [];\n\n        for (let i = 1; i < batchRowValues.length; i++) {\n          let rowObject = {};\n          for (let j = 0; j < batchRowValues[i].length; j++) {\n            rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n          }\n          rows.push(rowObject);\n        }\n\n        //dropdown options\n        let dropdownOptions = [];\n\n        for (let i = 0; i < rows.length; i++) {\n          dropdownOptions.push(rows[i].month);\n        }\n        dropdownOptions = Array.from(new Set(dropdownOptions)).reverse();\n        this.setState(\n          {\n            items: rows,\n            dropdownOptions: dropdownOptions,\n            selectedValue: \"Jan 2018\",\n          },\n          () => this.getData(\"Jan 2018\")\n        );\n      });\n  }\n  render() {\n    const chartData = [\n      {\n        label: \"Venezuela\",\n        value: \"290\",\n      },\n      {\n        label: \"Saudi\",\n        value: \"260\",\n      },\n    ];\n\n    return (\n      <div>\n        <WidgetBar title=\"Title\" data={chartData} />\n        <WidgetDoughnut title=\"Doughnut\" data={chartData} />\n        <Dropdown\n          options={this.state.dropdownOptions}\n          onChange={this.updateDashboard}\n          value={this.state.selectedValue}\n          placeholder=\"Select an option\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}